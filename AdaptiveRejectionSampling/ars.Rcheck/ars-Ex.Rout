
R version 3.2.3 (2015-12-10) -- "Wooden Christmas-Tree"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin13.4.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "ars"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('ars')
Loading required package: numDeriv
Loading required package: dplyr

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Loading required package: testthat
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("abscissaeSummary")
> ### * abscissaeSummary
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: abscissaeSummary
> ### Title: abscissaeSummary
> ### Aliases: abscissaeSummary
> 
> ### ** Examples
> 
> x <- seq(-2, 2, length.out = 10)
> abscissaeSummary(x, function(x) dnorm(x))
                                x_deriv
 [1,] -2.0000000 0.05399097  0.10798193
 [2,] -1.5555556 0.11897819  0.18507719
 [3,] -1.1111111 0.21519246  0.23910273
 [4,] -0.6666667 0.31944801  0.21296534
 [5,] -0.2222222 0.38921247  0.08649166
 [6,]  0.2222222 0.38921247 -0.08649166
 [7,]  0.6666667 0.31944801 -0.21296534
 [8,]  1.1111111 0.21519246 -0.23910273
 [9,]  1.5555556 0.11897819 -0.18507719
[10,]  2.0000000 0.05399097 -0.10798193
> 
> 
> 
> cleanEx()
> nameEx("ars")
> ### * ars
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ars
> ### Title: A function that returns samples from unnormalized density based
> ###   on reject sampling
> ### Aliases: ars
> 
> ### ** Examples
> 
> ars(n = 1000, g = dnorm)
[1] "We evaluated g 29 times during the rejection sampling"
   [1] -0.3058765101  1.4511185080  0.7467522886  0.1758264944  0.1148532877
   [6]  0.7659954484 -1.9869332880 -0.0267160547 -0.0992809014  0.3277138816
  [11]  1.1385976048  0.7492862094  0.8153449342 -0.1695752662 -0.2939154368
  [16]  0.8658156016  0.2288800916  0.3618935216 -0.4573229126 -0.7112231277
  [21]  2.5333749670  0.2818698570  0.1362667038 -0.4702533127 -0.1322528558
  [26] -0.0092483125 -0.9644121439  0.0659020176 -1.4711491439 -0.6220807803
  [31] -0.8425053447 -0.6001919057  1.2443794732 -0.1503088412  0.7710156138
  [36]  1.1689291679 -0.2375831264  1.1983414100 -0.0017608048  1.1515658946
  [41] -0.9314876629  0.6972467690  0.5900658965  1.5835751065  0.1120068908
  [46]  0.5511544952 -0.3027139088 -1.3275213202  0.3859707782  1.6825488892
  [51]  1.6864334508 -0.4144274053 -0.6403645911 -0.9832395406 -0.4642208698
  [56]  0.0319808060  1.4322554459  0.0341006218 -0.6556667796 -1.7098101613
  [61] -0.2052012745  1.0564813275 -0.3943701829 -1.1302053197 -0.0667651950
  [66]  0.2681484812 -0.0301690742 -1.2472888040 -0.6838563481  0.0042944797
  [71] -0.3219772520  1.5141978022  0.0688817599 -0.4756002616 -0.5894277059
  [76]  0.8079606611  0.5360697026 -0.9808620674 -1.5452683505  0.6976093096
  [81]  0.3107433416 -0.9624423809 -1.5639898060 -0.7545512881 -1.1303238316
  [86]  2.0966281407 -0.4478603736  0.0257032329  0.4753230902 -1.3027614870
  [91] -1.1931240623  2.2210665078 -0.5404396123 -0.2494751929  0.8966193668
  [96] -1.4391503755 -0.3446493937 -0.1372103700 -1.0111563992  0.2162460716
 [101]  1.8875008498  2.3268042505 -0.9313940914  0.1160517669 -0.2893042565
 [106]  0.4615338682 -0.6131101552 -0.0687543558 -0.9495556625 -0.3298057670
 [111]  0.6060892203 -0.0256014399 -1.5415246548 -0.7668743933 -0.1950322898
 [116] -0.4274230552  1.1043394001 -0.9285295099 -0.0073480505 -0.1704499006
 [121]  0.1715124620  0.4062796152  2.0324061069 -0.7319018836 -0.7033179204
 [126]  0.4182043881 -1.0728048414 -0.4006392206 -0.2366144041 -1.3850746353
 [131]  1.5000050666  0.9920452138  1.1745161912  1.5250424329 -1.4754883914
 [136] -1.1951903905 -0.7081329104  1.1008757527 -0.1582389066 -0.0003002785
 [141]  0.4991362931  0.7077345018 -1.0186191628  1.0386184526  1.6217551317
 [146]  0.2264006067  0.0107905683 -0.8831589031 -3.2251602394  0.2731722309
 [151] -1.8993329300 -0.4184296352 -0.5856471664 -1.1877766087 -1.7207791684
 [156] -0.3264886134 -0.4172377179 -0.9371658756  0.1363305544 -0.6967628946
 [161]  0.7715264163  0.3937976894  0.9635141920  0.3845812804 -0.0482904433
 [166] -0.0098721658 -0.3052695766 -0.1227520386  0.9013308778  1.4744608641
 [171] -1.0473420659  0.6791033311  1.9818741077  1.9665942857 -0.3836643045
 [176] -0.2681982921  1.6646231045 -1.2461433118  1.5208246507 -0.3957954209
 [181]  0.0853520150  0.0996435442  0.5712395084 -0.2373353620 -1.0245010505
 [186] -0.4119805043  0.3256817633 -1.5829150771  1.0522507295 -0.7979887266
 [191]  0.1013065746 -0.8648651338  0.2244425870  0.6844562233  1.1211817074
 [196] -0.3267318449  0.8442485876 -1.5746715415  0.3171129089 -0.3673849600
 [201]  0.2240850201  1.3703718682 -0.8444670842 -0.3339703388  0.4472427574
 [206]  0.7383794967  0.0583464216  0.9548814506  0.0704638603  0.0069610863
 [211] -0.2007490543 -0.3521505899 -1.1589603496 -0.5292682578 -0.5921054233
 [216]  0.7452714771  0.7719977831 -1.0635948610  0.0415202201  0.2482234288
 [221]  0.0172328005 -0.2888183895 -0.1850439737 -2.2911676844  1.4070768360
 [226] -1.4121986351  0.0210773657 -0.1679557938 -1.6361359775  0.6167237082
 [231]  0.1230280816  0.6835572344 -1.6441290017  0.5719779058 -0.3910652309
 [236]  1.6269261487 -0.4165115049 -1.8670448860 -0.3757726249 -0.2862586103
 [241] -0.3666896604  1.7600465972 -0.2951839572  0.1182612081  1.4491239124
 [246]  1.3905506455 -0.6975891611  0.5784212687 -0.3883516393  0.1381725304
 [251]  0.6576001165  0.9222371877  1.1323368402 -1.8109372305 -0.7727676182
 [256] -0.3397465232 -0.5079957402  0.6108148216  0.5273009859  1.3468608336
 [261]  1.0265354651  0.7733344006 -0.2503345509  0.1952901310 -1.4336698868
 [266] -3.0188279736  2.3074242323 -0.2571675377 -0.8866455479 -0.0552035175
 [271]  0.1113180195 -0.4461418403  0.3551115529 -1.8474009393  0.5137812373
 [276]  0.9011548758  0.0191273316 -1.2140858124  1.3234248705 -0.2194148112
 [281] -0.0655748738  0.5648691672 -0.7010700826 -0.5261126299  0.5377555597
 [286]  0.7458891847 -2.2178509316  0.1285952848  0.3921108807  1.4953878050
 [291]  0.4971912189 -0.6632193210 -0.2253425915 -1.1615806816 -1.1177603983
 [296]  0.3587695409 -0.3963802478 -0.1952547912  1.5578652268 -0.2961203211
 [301] -0.7445846813  0.4968695520 -2.3507850637  0.4851051772  0.8141369783
 [306]  0.0193042945 -0.5022854823  0.6358526190 -0.5117354066  0.7559928857
 [311] -1.2166053496  0.8356472441 -0.0220986392  0.9686179584  0.7026707251
 [316]  1.2987836021 -0.5878201181 -0.1367261911 -0.6070664371 -0.4415433033
 [321]  1.0998850265 -1.2285679473 -0.2480686335 -0.2381679058 -0.1601965449
 [326] -0.9275966610 -0.6261555735 -0.8175685001  0.3674479020 -0.4375196061
 [331]  1.7083066470  0.9073118993  0.6453373041 -0.7642784430 -1.6936746262
 [336] -0.3422014697  0.6488085152  1.5097635861  0.4489568375  0.5286849531
 [341]  1.0291356349  0.5426502695  1.0780491250 -0.1368492355  0.4584663572
 [346] -1.1374899257  0.6326433106 -1.5001762809 -0.5808153374 -0.2238488946
 [351]  1.5926246691  2.0086832960 -1.7710462977  0.2209885393 -1.8885642156
 [356]  0.1637206374 -1.2933739631  0.3324699221  0.9123090050 -0.3865624813
 [361] -1.1083087576 -1.4013209689 -0.3854744501  2.7095299136  0.0829258690
 [366] -0.4251106083 -0.4850446170 -0.2994615566 -2.0969713284 -1.7997544227
 [371]  1.1715520741 -0.2485695650 -0.0766335924 -0.2478618943  0.5308105560
 [376] -0.2561094728  0.0054275746 -1.7942878343 -0.5308617557  0.0038320277
 [381]  0.4396557128  0.5105767324  0.7829116873 -1.0855823270 -0.9819412868
 [386]  0.7068320922 -0.1407712607  0.3315216632 -1.2580769738  0.9796645340
 [391] -0.4291544953 -0.8452671619  0.5096837653 -0.9713733984 -1.4502711202
 [396] -1.7790222099  1.0228014514 -0.3222913912  1.1830638853 -1.3412647615
 [401] -0.0088539288  0.6901022578  0.2688280851  0.0724218050  1.7519042341
 [406] -0.6468855741 -0.0782342207 -0.4649052460 -0.9768731741  0.5691883007
 [411]  0.0713134747 -0.7255412277 -1.5232023735  0.4574467375  0.8671908784
 [416] -1.2000228127  0.5031861500 -2.0291102166 -0.3555776716  0.6219748147
 [421] -0.4894700346 -0.1329557093  0.9401339990 -0.4358549784 -1.0636972469
 [426] -0.5229612364 -0.9850980734  0.9961482815  0.4258740827 -1.0868187229
 [431] -0.4522301526  0.9637268084  0.9288801765 -1.0402295720 -0.1988758578
 [436] -0.1379607497  1.2000374399 -0.2149632031  0.4971445253  0.5756952567
 [441] -2.2631098710 -1.7843944485 -1.3382760496 -0.2567428063  1.2885463790
 [446] -0.1386722415  0.6934089565  0.5595680062 -0.9684358623  1.1268037162
 [451] -1.3487880912 -0.9834321636  1.0375257542  0.3282586844 -0.8143102617
 [456]  0.4494014453  1.8087384914  1.1888012967  1.7791541501 -0.0885110822
 [461] -1.4586006396  1.1517004138 -0.8481747409  0.0875434512 -1.2527656812
 [466] -0.2955244121  0.6698066612  0.5139891717 -1.2933085070  0.2844467314
 [471] -2.0463923374  0.3861341305  2.0293615397  1.0086395839  1.0098076242
 [476] -0.2864418570 -0.2211552398  0.1658672753 -1.0305962146  0.8720245437
 [481] -0.0105664540 -1.0793928123 -1.2271834846 -1.2245166750 -2.6073292056
 [486] -0.7135035067  1.1740520031 -1.4276450693 -1.0883130965 -1.6756834096
 [491] -1.8345194056  1.3855879283  0.9991336948 -0.4393062110  1.2543319173
 [496] -0.5052236601 -0.2464647087  0.1876535813  0.2471737720  0.1780521692
 [501] -0.7795561169  0.9200141666 -1.7992805092  0.3220933033 -0.1668718051
 [506] -0.3664842540  0.7541467457 -0.9419194927 -0.0159055649  0.6375328050
 [511]  0.0287818836 -0.0614699956  0.2237232715  0.1844627198  0.4008159264
 [516]  1.1083040782 -0.2609428674  1.7604235002 -0.3027541619 -0.9551914831
 [521] -0.7342418376  1.6538864833 -1.3854764975 -0.8676868200 -1.4457872348
 [526]  0.2680306607 -0.7871594572  0.2239477658 -0.7431904606 -0.2763837858
 [531] -0.3908113805  1.4011161530 -1.2182736563 -0.6592705967 -0.8914566466
 [536]  0.6634967684  1.5066790978 -0.0121358557  0.3739670849 -0.9327406873
 [541]  0.2627660902  1.2204155713 -0.0234331838 -2.1015959441 -0.9188768594
 [546] -0.5261628769 -0.5921346735 -1.5465473477 -0.3707990832  0.1959191373
 [551]  0.0893680263  0.2660940741 -0.0336320653 -1.1207056760  1.8135831406
 [556]  0.6538708370 -0.3399558393 -1.0344976442 -0.7496978727  0.6621606165
 [561] -1.6453227346  0.2394267259 -1.0241808854  0.7184043790  2.6238702525
 [566] -0.9397801948  0.3050350653  0.0968280478  0.9128768452 -0.4626228559
 [571]  0.2094278477 -1.4732598165  0.1796464276  0.1543209156 -0.1651097695
 [576]  1.7815939112  0.5594951500 -0.6484000272  1.4519031555 -2.2578340403
 [581] -1.4150460056 -0.7959264627  2.5909726858 -0.0188395474  0.3275357476
 [586] -2.5306775029  2.4180511604 -0.5386803208  0.8057002472  0.4894006173
 [591] -0.2499012581 -0.2602466734  1.2188691172  0.9278244680 -0.6265380672
 [596] -0.9106519382  1.7206602089  0.9884059647 -0.3934049258  1.0075966888
 [601] -2.3248580914 -0.7903984347  1.3708926870 -1.6601812902  1.1374355035
 [606]  0.4036045278 -0.7739399316 -2.3511796301 -1.4113616993  0.7339541090
 [611] -1.8373870693  0.7587750002 -0.2677467732  0.7922278606 -1.8367909924
 [616] -0.3410249060 -0.8140879691  1.8310264311  0.1657129822 -0.1468002044
 [621]  0.8596225737 -0.9715004159 -0.8195720689 -0.3881718460 -0.1221921002
 [626] -1.2640915134  0.2570577498 -1.2787402218  1.7282937930  0.2064528153
 [631] -0.9584432656  0.0483877793 -1.6061299162 -0.9079750457 -1.8484033367
 [636] -0.2173527743  0.5585061353 -0.1539707899 -0.0584956182 -0.3051052533
 [641]  0.7756674990  1.7774292847 -0.1394805662 -0.5923150904  0.3956968155
 [646]  0.6928647602  0.2262758826 -0.3390361869  0.0252904372 -1.0614698244
 [651] -0.6222448879 -0.9390111314  1.2683162169  0.1186774257 -0.4889346999
 [656] -0.1312820235 -0.2411129372 -0.0321826430 -0.1519121022 -0.6217271713
 [661]  0.3927376497 -0.7089222351  0.8940740011  0.8752259381  0.2269257210
 [666]  0.1069749482 -1.6816671476 -0.1857985393  0.3624448968 -3.2346076548
 [671]  1.1138869706 -1.2761687180 -1.3068765152  0.7660706586 -1.8904899483
 [676] -0.4059681900  0.7969979534 -1.2088034208 -0.3838081208 -0.4384029131
 [681]  0.5171603041 -0.3747458481 -0.2362116027 -0.5005897573  1.6206588533
 [686] -0.5990032383  0.9957184114 -1.0636162530  0.6983960792 -0.1349681505
 [691]  1.7050161995  0.3471328246 -0.9782121104 -0.2348438711  2.0582029051
 [696] -1.0501036423  1.2288301967 -0.8536108447  0.3080453223  0.8169064907
 [701]  0.6257097218  0.6814486627  0.0621779475  0.3328263729 -0.1102773528
 [706] -0.6618753884 -1.5783507815 -0.1624462902  0.7440793997 -1.1310401569
 [711]  2.1539715607  0.8953511605  2.1001211245 -1.7981305919  0.1708001030
 [716] -0.2484079479 -0.1073210697 -0.2442532661  0.1829712980 -0.6424859596
 [721]  1.1479262056  2.4816325452  1.4812019487  2.2255811624  0.4091483926
 [726] -0.5173017675  1.1161208236  0.4444833803 -0.0263519449  0.3291950837
 [731]  0.4987154546  0.4473260443  1.1878407472  0.4904392873  3.6541525943
 [736] -0.6727590331 -0.0533078751 -2.1716690959 -0.6680938557 -0.4488123982
 [741]  0.4468864381  0.6711091925 -0.4055750094 -0.5819788379  0.6366992453
 [746]  0.3249138212  0.3423776731 -0.7860518788  1.3190810489  0.2187738428
 [751] -0.9602071149  0.4776556048 -1.2064361030  0.0708163495  1.5720339449
 [756] -1.0414158543  0.2261544807  1.1685190660 -0.9227287318 -0.0725220364
 [761] -1.0742496062 -1.2860226656 -0.5522034050 -0.6887902454  0.5917140423
 [766]  0.0919761435 -0.5270516410 -0.8428438484  1.3448841112 -1.8420014763
 [771]  0.2447167546 -1.0330207892  0.1968073221 -0.1138202288 -0.0147982346
 [776]  0.0665882316 -0.2971875535  1.4714547714 -0.1672404450 -0.6910654668
 [781]  1.1585318712 -0.9055390352 -1.3399277143 -0.7090597687  1.0885056967
 [786]  0.9663112327 -0.3504288421 -0.8858447264  0.7362216243 -0.1485110851
 [791] -0.0577282233  2.0773247625 -1.3470073958 -1.2975795640  0.3480500788
 [796] -0.8470037979 -0.6383172496 -0.4708195164  1.1262815596 -1.6272453089
 [801] -0.8278952942  0.1831036777 -1.7910639050 -2.0984304294 -0.8541661660
 [806] -0.4095372261 -0.5719137789 -0.8917114717  0.8347519881 -0.7592522260
 [811] -0.0843108385 -0.4608049534  0.1128295763  1.9116428644 -1.0398901093
 [816] -0.3483727855  0.7979915898  0.2197050962  0.1008510347  1.1469475215
 [821]  0.7384549757 -0.1230315040  1.5512657678  0.1484154850  0.1799065334
 [826] -1.2418260906 -0.2821169415  2.0127115480  1.9334591757 -1.2120697781
 [831]  0.1230022709  1.1391226180  1.0936644249  0.2816222389 -2.9820647915
 [836] -0.4561523287  1.1302507985  0.0178202155  1.3146989240  2.2193330133
 [841] -0.4823110331 -2.2355834941 -0.2243939929  0.7537494828  1.6721692380
 [846]  0.6030737696  0.0419538646  0.6261169577  1.0397273668  0.9111226819
 [851]  0.5888090234 -0.1468163262 -0.1578925739  0.9797150347 -0.2917165884
 [856]  0.4531251607 -1.4213578977  0.9520412672 -2.1423321286 -1.2132161713
 [861] -0.0218197088  0.4769966973  0.2706296356  1.2685210091 -0.5027129328
 [866]  0.1075629765  0.6321273249 -1.0109147053  0.4754957397  1.1809024937
 [871] -0.3404180369 -1.8414337335  0.0503583980 -1.2131054875  1.2978679933
 [876] -0.7725200534  0.3156125080 -0.3498569951  0.8030612068  1.6857224664
 [881]  0.4869802071 -2.2947098293  1.7305133219 -0.0040819298  0.1033384413
 [886] -1.5582713980 -0.9903477786  0.7013275420 -0.4601237032  0.3023537769
 [891]  0.2384750724 -1.6658975515 -0.2689735551 -0.4910438956 -0.1691553885
 [896] -0.3596132742  0.6662913053  1.6735644158 -0.7757855804  0.9432695497
 [901] -1.9218568229  1.6269958378  2.0281020154  0.8929570984  0.4362737696
 [906] -0.5308323440  1.0517128075  1.0220771217 -0.3118010876  1.1169869222
 [911]  0.0945001671  0.1964719499 -2.1573268188  1.3514315830  0.3591039907
 [916]  0.1368636920  0.4688065211  1.5585889900  1.2087554549  1.1763861426
 [921]  0.9791825116  0.1448323670 -0.0815072539  0.7208246271  1.1577851641
 [926]  0.5308243496  0.4875477371 -1.0795894571  1.7174839912  1.1802149053
 [931] -0.7304204760  0.8712287767  1.4590235723  0.9329254531  1.0498366315
 [936]  1.0260604599  0.8008439220  0.6141788164 -0.5628543802  0.6093778141
 [941]  0.1187601047 -1.7380079207  0.1663724462 -0.8378457771 -0.1643863860
 [946] -0.7161341853  2.2356611053  0.3756070251  0.7816746202 -1.4955157072
 [951]  0.2844950743 -1.0979634127 -0.7075485234 -0.0289591938  0.0996959115
 [956]  2.1844290615  0.2615247875  1.3719530493 -0.7192047291 -0.3786016241
 [961]  1.7929024307 -0.7793041029  1.1408998000  1.2658828566 -0.2770417136
 [966]  0.3085467840  0.4524606674 -0.4186484587  1.4945804277 -0.0374975003
 [971] -0.0329614248  1.1888146762 -0.0468172853 -0.1056386321 -1.9174330863
 [976]  0.2029057919 -0.0129890410  0.7816295779  0.0596596180 -0.5423621317
 [981] -1.1510725194 -2.0296671105  0.0046090766 -0.0215267114 -0.8841763931
 [986]  1.2239036167  0.6723352756 -0.1737603256  0.0050231758  0.6652908094
 [991] -0.1811523721 -0.5480719834  0.3845504974 -0.9180672287 -0.9535297033
 [996]  0.4377796530 -0.3672592090 -0.3851870922  0.3152618485  0.8437777315
> 
> 
> 
> cleanEx()
> nameEx("findInitAbsc")
> ### * findInitAbsc
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: findInitAbsc
> ### Title: A function that returns a matrix with the three columns being
> ###   the abscissae x1,...,xk and their corresponding h(x)'s and h'(x)'s
> ###   respectively.
> ### Aliases: findInitAbsc
> 
> ### ** Examples
> 
> findInitAbsc(function(x){
+    return(dnorm(x, mean=3, sd=2))
+  },6)
        x       h(x) h'(x)
[1,] -9.0 -19.612086   3.0
[2,] -4.2  -8.092086   1.8
[3,]  0.6  -2.332086   0.6
[4,]  5.4  -2.332086  -0.6
[5,] 10.2  -8.092086  -1.8
[6,] 15.0 -19.612086  -3.0
> 
>  # Chi-square distribution
>  g <- function(x){
+    return(dchisq(x, 10, ncp=3))
+  }
>  findInitAbsc(g,4,3)
             x      h(x)       h'(x)
[1,]  3.010000 -4.805199  0.96888792
[2,]  8.066459 -2.716314  0.12318109
[3,] 13.122917 -2.679211 -0.07733845
[4,] 18.179376 -3.327260 -0.16953518
> 
>  # Uniform distribution
>  g <- function(x){
+    return(dunif(x, min=2, max=5))
+  }
>  findInitAbsc(g,6,2,5)
         x      h(x) h'(x)
[1,] 2.010 -1.098612     0
[2,] 2.606 -1.098612     0
[3,] 3.202 -1.098612     0
[4,] 3.798 -1.098612     0
[5,] 4.394 -1.098612     0
[6,] 4.990 -1.098612     0
> 
>  # Piecewise constant distribution
>  h <- function(x){
+    a <- sapply(x,function(x){if(x<1) return (x)
+      else if(x>=1 & x <=2) return (1)
+      else if(x>2) return (-x+3)})
+    return (a)
+  }
>  g <- function(x){
+    return(exp(h(x)))
+  }
>  findInitAbsc(g,6)
         x  h(x) h'(x)
[1,] -10.5 -10.5     1
[2,]  -5.7  -5.7     1
[3,]  -0.9  -0.9     1
[4,]   3.9  -0.9    -1
[5,]   8.7  -5.7    -1
[6,]  13.5 -10.5    -1
> 
> 
> 
> cleanEx()
> nameEx("findMode")
> ### * findMode
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: findMode
> ### Title: A function that returns the mode of a function
> ### Aliases: findMode
> 
> ### ** Examples
> 
> # Normal distribution
>  g <- function(x){
+    return(dnorm(x, mean=3, sd=2))
+  }
>  findMode(g)
[1] 3
> 
>  # Chi-square distribution
>  g <- function(x){
+    return(dchisq(x, 10, ncp=3))
+  }
>  findMode(g,3)
[1] 10.58969
> 
>  # Uniform distribution
>  g <- function(x){
+    return(dunif(x, min=2, max=5))
+  }
>  findMode(g,2,5)
[1] 3
> 
>  # Piecewise constant distribution
>  h <- function(x){
+    a <- sapply(x,function(x){if(x<1) return (x)
+      else if(x>=1 & x <=2) return (1)
+      else if(x>2) return (-x+3)})
+    return (a)
+  }
>  g <- function(x){
+    return(exp(h(x)))
+  }
>  findMode(g)
[1] 1.5
> 
> 
> 
> cleanEx()
> nameEx("lowerHull")
> ### * lowerHull
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: lowerHull
> ### Title: A function that, given a vector x, returns the corresponding
> ###   values of the upper hull function
> ### Aliases: lowerHull
> 
> ### ** Examples
> 
> h <- function(x){
+   return(log(dnorm(x)))
+ }
> 
> xSupport <- seq(-3, 3, length.out = 10)
> 
> abscissae_summary = abscissaeSummary(xSupport,h)
> 
> x <- seq(-3, 3, length.out = 10)
> upperHull(x,abscissae_summary)
 [1] -5.4189385 -3.6411608 -2.3078274 -1.4189385 -0.9744941 -0.9744941
 [7] -1.4189385 -2.3078274 -3.6411608 -5.4189385
> lowerHull(x,abscissae_summary)
 [1] -5.4189385 -3.6411608 -2.3078274 -1.4189385 -0.9744941 -0.9744941
 [7] -1.4189385 -2.3078274 -3.6411608 -5.4189385
> 
> x <- seq(-3, 3, length.out = 30)
> upperHull(x,abscissae_summary)
 [1] -5.4189385 -4.7982489 -4.2311991 -3.7484404 -3.2656818 -2.8059117
 [7] -2.4610841 -2.1162565 -1.7714290 -1.5568696 -1.3499730 -1.1430765
[13] -1.0357968 -0.9668313 -0.8978657 -0.8978657 -0.9668313 -1.0357968
[19] -1.1430765 -1.3499730 -1.5568696 -1.7714290 -2.1162565 -2.4610841
[25] -2.8059117 -3.2656818 -3.7484404 -4.2311991 -4.7982489 -5.4189385
> lowerHull(x,abscissae_summary)
 [1] -5.4189385 -4.8672144 -4.3154903 -3.7637661 -3.3193217 -2.9055286
 [7] -2.4917355 -2.1545707 -1.8787086 -1.6028466 -1.3729615 -1.2350305
[13] -1.0970995 -0.9744941 -0.9744941 -0.9744941 -0.9744941 -1.0970995
[19] -1.2350305 -1.3729615 -1.6028466 -1.8787086 -2.1545707 -2.4917355
[25] -2.9055286 -3.3193217 -3.7637661 -4.3154903 -4.8672144 -5.4189385
> 
> 
> 
> cleanEx()
> nameEx("upperHull")
> ### * upperHull
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: upperHull
> ### Title: A function that, given a vector x, returns the corresponding
> ###   function values from the upper hull
> ### Aliases: upperHull
> 
> ### ** Examples
> 
> # Test1: log of normal distribution
> h <- function(x){
+   return(log(dnorm(x)))
+ }
> 
> xSupport <- seq(-3, 3, length.out = 10)
> 
> abscissae_summary = abscissaeSummary(xSupport,h)
> 
> x <- seq(-3, 3, length.out = 10)
> upperHull(x,abscissae_summary)
 [1] -5.4189385 -3.6411608 -2.3078274 -1.4189385 -0.9744941 -0.9744941
 [7] -1.4189385 -2.3078274 -3.6411608 -5.4189385
> lowerHull(x,abscissae_summary)
 [1] -5.4189385 -3.6411608 -2.3078274 -1.4189385 -0.9744941 -0.9744941
 [7] -1.4189385 -2.3078274 -3.6411608 -5.4189385
> 
> x <- seq(-3, 3, length.out = 30)
> upperHull(x,abscissae_summary)
 [1] -5.4189385 -4.7982489 -4.2311991 -3.7484404 -3.2656818 -2.8059117
 [7] -2.4610841 -2.1162565 -1.7714290 -1.5568696 -1.3499730 -1.1430765
[13] -1.0357968 -0.9668313 -0.8978657 -0.8978657 -0.9668313 -1.0357968
[19] -1.1430765 -1.3499730 -1.5568696 -1.7714290 -2.1162565 -2.4610841
[25] -2.8059117 -3.2656818 -3.7484404 -4.2311991 -4.7982489 -5.4189385
> lowerHull(x,abscissae_summary)
 [1] -5.4189385 -4.8672144 -4.3154903 -3.7637661 -3.3193217 -2.9055286
 [7] -2.4917355 -2.1545707 -1.8787086 -1.6028466 -1.3729615 -1.2350305
[13] -1.0970995 -0.9744941 -0.9744941 -0.9744941 -0.9744941 -1.0970995
[19] -1.2350305 -1.3729615 -1.6028466 -1.8787086 -2.1545707 -2.4917355
[25] -2.9055286 -3.3193217 -3.7637661 -4.3154903 -4.8672144 -5.4189385
> 
> h <- function(x){
+  return(log(dchisq(x,df = 2)))
+ }
> 
> xSupport <- seq(-3, 3, length.out = 10)
> abscissae_summary = abscissaeSummary(xSupport,h)
> x <- seq(-3, 3, length.out = 10)
> upperHull(x,abscissae_summary)
 [1]  0.8068528  0.4735195  0.1401862 -0.1931472 -0.5264805 -0.8598138
 [7] -1.1931472 -1.5264805 -1.8598138 -2.1931472
> lowerHull(x,abscissae_summary)
 [1]       -Inf       -Inf       -Inf       -Inf       -Inf -0.8598138
 [7] -1.1931472 -1.5264805 -1.8598138 -2.1931472
> 
> # Test2: log of uniform distribution
> h <- function(x){
+  return(log(dunif(x,0,1)))
+ }
> 
> xSupport <- seq(-3, 3, length.out = 100)
> abscissae_summary = abscissaeSummary(xSupport,h)
> x <- seq(-3, 3, length.out = 10)
> x <- seq(0.2, 0.9, length.out = 10)
> upperHull(x,abscissae_summary)
 [1] 0 0 0 0 0 0 0 0 0 0
> lowerHull(x,abscissae_summary)
 [1] 0 0 0 0 0 0 0 0 0 0
> 
> # Test3: log of piecewise constant distribution
> h <- function(x){
+  a= sapply(x,function(x){if(x<1) return (x)
+  else if(x>=1 & x <=2) return (1)
+  else if(x>2) return (-x+3)})
+  return (a)
+ }
> 
> xSupport <- seq(-3, 3, length.out = 15)
> abscissae_summary = abscissaeSummary(xSupport,h)
> x <- seq(-3, 3, length.out = 10)
> x <- seq(0.2, 0.9, length.out = 10)
> upperHull(x,abscissae_summary)
 [1] 0.2000000 0.2777778 0.3555556 0.4333333 0.5111111 0.5888889 0.6666667
 [8] 0.7444444 0.8222222 0.9000000
> lowerHull(x,abscissae_summary)
 [1] 0.2000000 0.2777778 0.3555556 0.4333333 0.5111111 0.5888889 0.6666667
 [8] 0.7444444 0.8222222 0.8714286
> 
> 
> 
> ### * <FOOTER>
> ###
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.483 0.014 0.498 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
